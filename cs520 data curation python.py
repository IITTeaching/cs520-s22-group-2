# -*- coding: utf-8 -*-
"""CS520.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tbchkYQ1U3JEyPqRvWBSkYKDQy0tbG0-
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
flights=pd.read_csv("/content/drive/Shareddrives/CS520 S22 G2/Data Curation Project/cs520dataset.csv")

flights.describe()

flights.head()

# Importing all required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno

# Visualizing missing data in each column
msno.matrix(flights)

df=pd.DataFrame(flights.isnull().sum())
df.columns=["NA"]
df["Filling Factor"]= (1-(df["NA"]/len(flights.index)))*100
coulumns_with_missing_data=df[df["Filling Factor"] !=100].index
df

total_na=df["NA"].sum()
total_content=len(flights.index)*len(flights.columns)
missing_content=((total_na/total_content)*100)
print("Missing Data: ", missing_content,"%")

#FIXING DATE COLUMN

for i in range(flights.shape[0]):
  d=""+str(flights.FLIGHTDATE[i])
  newd=d[:4]+"/"+d[4:6]+"/"+d[6:]
  flights.FLIGHTDATE[i]=newd

flights.head()

"""We try to resolve following issues in the codes below:
1. DISTANCE column is a string value with " miles" keyword in it.So, we remove that keyword and change the column to numeric value.
2. DIVERTED column and CANCELLED columns have different values assigned to Boolean values True and False.So, we make them unique to one value.
3. TAILNUM column had some garbage character "@" associated with the values.So, we take those characters off from the value.
4. AIRLINENAME column has the airline code concatenated with the airline name.So, we take the airline code off the string.

"""

# Removed "miles" keyword from values of DISTANCE column and changed the column to numeric column.
flights["DISTANCE"]=flights["DISTANCE"].str.replace(" miles","")
flights["DISTANCE"]=pd.to_numeric(flights["DISTANCE"])
flights[:10]

# Showing distint values of column before the change
flights.DIVERTED.unique()

# In the diverted boolean column the data needs to be reduced to 1 value. 
# Currently for False it also has 0 and F
flights.loc[flights["DIVERTED"] == "F", "DIVERTED"] = "FALSE"
flights.loc[flights["DIVERTED"] == "0", "DIVERTED"] = "FALSE"
flights.loc[flights["DIVERTED"] == "T", "DIVERTED"] = "TRUE"
flights.loc[flights["DIVERTED"] == "1", "DIVERTED"] = "TRUE"

# Showing distint values of column after the change
flights.DIVERTED.unique()

# Showing distint values of column before the change
flights.CANCELLED.unique()

# In the cancelled boolean column the data needs to be reduced to 1 value. 
# Currently for False it also has 0 and F
flights.loc[flights["CANCELLED"] == "F", "CANCELLED"] = "FALSE"
flights.loc[flights["CANCELLED"] == "0", "CANCELLED"] = "FALSE"
flights.loc[flights["CANCELLED"] == "T", "CANCELLED"] = "TRUE"
flights.loc[flights["CANCELLED"] == "1", "CANCELLED"] = "TRUE"

# Showing distint values of column after the change
flights.CANCELLED.unique()

print("Number of values in TAILNUM column with @ in it before change: ",flights["TAILNUM"].str.match(r".*\@.*").sum())
##count(r'(^F.*)').sum()

# Removed "@" character from values of TAILNUM column
flights["TAILNUM"]=flights["TAILNUM"].str.replace("\@","")
print("Number of values in TAILNUM column with @ in it after change: ",flights["TAILNUM"].str.match(r".*\@.*").sum())

flights.head()

# Taking off Airline code off the Airline Name column
flights["AIRLINENAME"] = flights["AIRLINENAME"].str.split(":").str[0]
flights.head()

flights["ORIGAIRPORTNAME"] = flights["ORIGAIRPORTNAME"].str.split(":").str[1]
flights["DESTAIRPORTNAME"] = flights["DESTAIRPORTNAME"].str.split(":").str[1]
flights.head()

#The Boxplots are used to visualize the distribution of data which is useful when a comparison of data is required
#comparing the distribution of distance travelled according to airlines
plt.figure(figsize=(30,15))
sns.boxplot(y=flights["AIRLINENAME"], x=flights["DISTANCE"])

#Making tuples of Origin and Destination airport to visualize most flights from origin city to destination
flights['Origin_dest_tuple'] = list(zip(flights.ORIGINCITYNAME, flights.DESTCITYNAME))

pd.set_option('display.max_rows', None)

flights['Origin_dest_tuple'].value_counts()

max_freq = flights['Origin_dest_tuple'].value_counts()

plt.figure(figsize=(20,7))
sns.barplot(x = max_freq.index[0:7], y = max_freq.values[0:7])

#Most flights cancelled by which airlines?
#flights.CANCELLED.value_counts()
sns.set(rc={'figure.figsize':(20,8.27)})
flights.groupby('AIRLINENAME').CANCELLED.value_counts().unstack(0).plot.barh()

#pd.set_option('display.max_columns', None)
cancelled_airlines = flights.groupby('AIRLINENAME')['CANCELLED'].value_counts(ascending=False).unstack(1)
cancelled_airlines

flights.CANCELLED.value_counts()

flights.groupby('CANCELLED').CANCELLED.value_counts().unstack(0).plot.barh()

#flights diverted vs. not diverted
flights.DIVERTED.value_counts()

flights.groupby('DIVERTED').DIVERTED.value_counts().unstack(0).plot.barh()

flights.head()

def convert_time(string):

  if(len(string)==3):
    hours  =  string[:1] 
    minutes = string[1:]
    print(hours);
    print(string);
    print(minutes);
  elif(len(string)<=2):
    hours  =  "00"
    minutes = string
  else:
    hours  =  string[:2] 
    minutes = string[2:]
  x = " "
  if int(hours) == 12:
      x = "p.m."
      hours = "12"
  elif int(hours) == 00:
        x = "a.m."
        hours = "12" 
  elif int(hours) > 12:
      x = "p.m."
      hours  = str(int(hours) - 12)
  else:
      x = "a.m."
  return "%s:%s %s"%(hours ,minutes,x)

import numpy as np
flights.ARRTIME= flights.ARRTIME.replace(np.nan,-1)
flights.SCHEDULEDARRTIME= flights.SCHEDULEDARRTIME.replace(np.nan,-1)
flights.DEPTIME=flights.DEPTIME.replace(np.nan,-1)
flights.SCHEDULEDDEPTIME=flights.SCHEDULEDDEPTIME.replace(np.nan,-1)
flights.WHEELSOFF=flights.WHEELSOFF.replace(np.nan,-1)
flights.WHEELSON=flights.WHEELSON.replace(np.nan,-1)

for i in range(flights.shape[0]):
  t1=str(int(flights.ARRTIME[i]))
  t2=str(int(flights.SCHEDULEDARRTIME[i]))
  t3=str(int(flights.DEPTIME[i]))
  t4=str(int(flights.SCHEDULEDDEPTIME[i]))
  t5=str(int(flights.WHEELSOFF[i]))
  t6=str(int(flights.WHEELSON[i]))

  if(flights.ARRTIME[i]==-1):
    flights.ARRTIME[i]=""
  else:
    flights.ARRTIME[i]=convert_time(t1)

  if(flights.SCHEDULEDARRTIME[i]==-1):
    flights.SCHEDULEDARRTIME[i]=""
  else:
    flights.SCHEDULEDARRTIME[i]=convert_time(t2)
  
  if(flights.DEPTIME[i]==-1):
    flights.DEPTIME[i]=""
  else:
    flights.DEPTIME[i]=convert_time(t3)
  
  if(flights.SCHEDULEDDEPTIME[i]==-1):
    flights.SCHEDULEDDEPTIME[i]=""
  else:
    flights.SCHEDULEDDEPTIME[i]=convert_time(t4)
  
  if(flights.WHEELSOFF[i]==-1):
    flights.WHEELSOFF[i]=""
  else:
    flights.WHEELSOFF[i]=convert_time(t5)
  
  if(flights.WHEELSON[i]==-1):
    flights.WHEELSON[i]=""
  else:
    flights.WHEELSON[i]=convert_time(t6)

flights[:10]

#fIXING mISSINg vALUEIS

print(flights.ORIGINSTATE.isna().sum())

print(flights.ORIGINSTATENAME.isna().sum())

flights.ORIGINSTATE=flights.ORIGINSTATE.astype('str')
flights.ORIGINSTATENAME=flights.ORIGINSTATENAME.astype('str')

for i in range(flights.shape[0]):
  if (len(str(flights.ORIGINSTATE[i]))!=2):
    for j in range(flights.shape[0]):
      if(flights.ORIGINCITYNAME[i]==flights.ORIGINCITYNAME[j]):
        flights.ORIGINSTATE[i]=flights.ORIGINSTATE[i].replace(flights.ORIGINSTATE[i],flights.ORIGINSTATE[j])
        flights.ORIGINSTATENAME[i]=flights.ORIGINSTATENAME[i].replace(flights.ORIGINSTATENAME[i],flights.ORIGINSTATENAME[j])
        break

print(flights.ORIGINSTATE.isna().sum())

print(flights.ORIGINSTATENAME.isna().sum())

print(flights.DESTSTATE.isna().sum())

print(flights.DESTSTATENAME.isna().sum())

flights.DESTSTATE=flights.DESTSTATE.astype('str')
flights.DESTSTATENAME=flights.DESTSTATENAME.astype('str')

for i in range(flights.shape[0]):
  if (len(str(flights.DESTSTATE[i]))!=2):
    for j in range(flights.shape[0]):
      if(flights.DESTCITYNAME[i]==flights.DESTCITYNAME[j]):
        flights.DESTSTATE[i]=flights.DESTSTATE[i].replace(flights.DESTSTATE[i],flights.DESTSTATE[j])
        flights.DESTSTATENAME[i]=flights.DESTSTATENAME[i].replace(flights.DESTSTATENAME[i],flights.DESTSTATENAME[j])
        break

print(flights.DESTSTATE.isna().sum())

print(flights.DESTSTATENAME.isna().sum())